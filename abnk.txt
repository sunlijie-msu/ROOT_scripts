ABNKCOULFG.  COULFG, COULOMB AND BESSEL FUNCTIONS AND THEIR DERIVATIVES,ABNK0000
1   FOR REAL ARGUMENTS, BY STEED'S METHOD.  A.R. BARNETT.               ABNK0000
REF. IN COMP. PHYS. COMMUN. 27 (1982) 147                               ABNK0000
//ARCOUCPC   JOB (30210,AR,'R=MANC'),BARNETT,MSGLEVEL=(1,1),NOTIFY=AR   ABNK0001
// EXEC FHXCLG,                                                         ABNK0002
// PARM.C='SOURCE,XREF,MAP',REGION.G=180K,TIME.G=(0,59)                 ABNK0003
//C.SYSIN  DD  *                                                        ABNK0004
      IMPLICIT REAL*8(A-H,O-Z)                                          ABNK0005
C *** MAIN PROGRAM TO TEST COULOMB WAVEFUNCTIONS  MANCHESTER  JUNE 1981 ABNK0006
      DIMENSION FC(1200),GC(1200),FCP(1200),GCP(1200),XX(21),XL(10)     ABNK0007
      DIMENSION NJ(21) ,TEXT(9)                                         ABNK0008
         COMMON /STEED/ PACCQ,NFP,NPQ,IEXP,M1                           ABNK0009
      DATA NJ / 40,3*50,2*100,15*0/ , ONE /1.0D0/                       ABNK0010
      WRITE(6,1)                                                        ABNK0011
      MODE = 1                                                          ABNK0012
   10 READ(5,2) ETA,N,(XL(I),I=1,10),XM,KFN                             ABNK0013
      IF(N .EQ. 0) STOP                                                 ABNK0014
      READ(5,3) (XX(I),I=1,N)                                           ABNK0015
                IF(KFN .LT. 0) READ (5,4) (TEXT(I),I=1,9)               ABNK0016
                IF(KFN .LT. 0) WRITE(6,6) (TEXT(I),I=1,9)               ABNK0017
      DO 60 I = 1,N                                                     ABNK0018
         JMAX = 1                                                       ABNK0019
      DO 20 J = 2,10                                                    ABNK0020
   20 IF(XL(J)  .GT.  XM )     JMAX = J                                 ABNK0021
      IF(XL(10) .LE. -ONE) XL(JMAX) = NJ(I)                             ABNK0022
         KFN  = IABS(KFN)                                               ABNK0023
      IF(KFN .EQ. 4) KFN   = 0                                          ABNK0024
      IF(KFN .NE. 3)                         GO TO 30                   ABNK0025
                     JMAX  = 1                                          ABNK0026
                     XL(1) = ONE/XM                                     ABNK0027
                     XM    = XL(1)                                      ABNK0028
                     KFN   = 2                                          ABNK0029
   30 CALL COULFG(XX(I),ETA,XM,XL(JMAX),FC,GC,FCP,GCP,MODE,KFN,IFAIL)   ABNK0030
      IF(IFAIL .NE. 0) WRITE(6,7) IFAIL,JMAX,KFN,XX(I),ETA,XM,XL(JMAX)  ABNK0031
      IF(IFAIL .NE. 0)                       GO TO 10                   ABNK0032
      IF(JMAX  .EQ. 1)                       GO TO 50                   ABNK0033
      DO 40 KK = 2,JMAX                                                 ABNK0034
             K = M1 + IDINT(XL(KK-1) - XM)                              ABNK0035
   40 WRITE(6,8) ETA,XX(I),XL(KK-1),FC(K),GC(K),FCP(K),GCP(K)           ABNK0036
   50        K = M1 + IDINT(XL(JMAX) - XM)                              ABNK0037
      WRITE(6,8) ETA,XX(I),XL(JMAX),FC(K),GC(K),FCP(K),GCP(K),          ABNK0038
     *           NFP,NPQ,PACCQ                                          ABNK0039
   60 IF(IEXP .GT. 1) WRITE(6,9) IEXP                                   ABNK0040
                                             GO TO 10                   ABNK0041
    1 FORMAT(1H1,35X,61H TEST OF THE MANCHESTER COULOMB WAVEFUNCTION PROABNK0042
     *GRAM - COULFG//,5X,4H ETA,6X,4H X  ,6X,2HXL,10X,2H F,18X,2H G,    ABNK0043
     *18X,2HFP,19X,2HGP,11X,16HNFP   NPQ  PACCQ/)                       ABNK0044
    2 FORMAT(F10.3,I5,11F5.0,I2)                                        ABNK0045
    3 FORMAT(7F10.3)                                                    ABNK0046
    4 FORMAT(9A8)                                                       ABNK0047
    5 FORMAT(/)                                                         ABNK0048
    6 FORMAT(/28X,9A8/)                                                 ABNK0049
    7 FORMAT(1X,'IFAIL =',I10,' JMAX,KFN = ',2I4,4F12.4)                ABNK0050
    8 FORMAT(1X,F9.3,F10.3,F8.1,1P4D20.11,2I6,D9.0)                     ABNK0051
    9 FORMAT(12X,13H **** IEXP = ,I6,31H  F,FP *10**(-IEXP)  G,GP *10** ABNK0052
     *,6H(IEXP)/)                                                       ABNK0053
      END                                                               ABNK0054
      SUBROUTINE COULFG(XX,ETA1,XLMIN,XLMAX, FC,GC,FCP,GCP,             ABNK0055
     *                  MODE1,KFN,IFAIL)                                ABNK0056
C                                                                       ABNK0057
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCABNK0058
C                                                                      CABNK0059
C  REVISED COULOMB WAVEFUNCTION PROGRAM USING STEED'S METHOD           CABNK0060
C                                                                      CABNK0061
C  A. R. BARNETT           MANCHESTER  MARCH   1981                    CABNK0062
C                                                                      CABNK0063
C  ORIGINAL PROGRAM 'RCWFN'      IN    CPC  8 (1974) 377-395           CABNK0064
C                 + 'RCWFF'      IN    CPC 11 (1976) 141-142           CABNK0065
C  FULL DESCRIPTION OF ALGORITHM IN    CPC 21 (1981) 297-314           CABNK0066
C  THIS VERSION WRITTEN UP       IN    CPC XX (1982) YYY-ZZZ           CABNK0067
C                                                                      CABNK0068
C  COULFG RETURNS F,G,F',G', FOR REAL XX.GT.0,REAL ETA1 (INCLUDING 0), CABNK0069
C   AND REAL LAMBDA(XLMIN) .GT. -1 FOR INTEGER-SPACED LAMBDA VALUES    CABNK0070
C   THUS GIVING POSITIVE-ENERGY SOLUTIONS TO THE COULOMB SCHRODINGER   CABNK0071
C   EQUATION,TO THE KLEIN-GORDON EQUATION AND TO SUITABLE FORMS OF     CABNK0072
C   THE DIRAC EQUATION ,ALSO SPHERICAL & CYLINDRICAL BESSEL EQUATIONS  CABNK0073
C                                                                      CABNK0074
C  FOR A RANGE OF LAMBDA VALUES (XLMAX - XLMIN) MUST BE AN INTEGER,    CABNK0075
C  STARTING ARRAY ELEMENT IS M1 = MAX0(IDINT(XLMIN+ACCUR),0) + 1       CABNK0076
C      SEE TEXT FOR MODIFICATIONS FOR INTEGER L-VALUES                 CABNK0077
C                                                                      CABNK0078
C  IF 'MODE' = 1  GET F,G,F',G'   FOR INTEGER-SPACED LAMBDA VALUES     CABNK0079
C            = 2      F,G      UNUSED ARRAYS MUST BE DIMENSIONED IN    CABNK0080
C            = 3      F               CALL TO AT LEAST LENGTH (1)      CABNK0081
C  IF 'KFN'  = 0 REAL        COULOMB FUNCTIONS ARE RETURNED            CABNK0082
C            = 1 SPHERICAL   BESSEL      "      "     "                CABNK0083
C            = 2 CYLINDRICAL BESSEL      "      "     "                CABNK0084
C  THE USE OF 'MODE' AND 'KFN' IS INDEPENDENT                          CABNK0085
C                                                                      CABNK0086
C  PRECISION:  RESULTS TO WITHIN 2-3 DECIMALS OF 'MACHINE ACCURACY'    CABNK0087
C   IN OSCILLATING REGION X .GE. ETA1 + SQRT(ETA1**2 + XLM(XLM+1))     CABNK0088
C   COULFG IS CODED FOR REAL*8 ON IBM OR EQUIVALENT  ACCUR = 10**-16   CABNK0089
C   USE AUTODBL + EXTENDED PRECISION ON HX COMPILER  ACCUR = 10**-33   CABNK0090
C   FOR MANTISSAS OF 56 & 112 BITS. FOR SINGLE PRECISION CDC (48 BITS) CABNK0091
C   REASSIGN DSQRT=SQRT ETC.  SEE TEXT FOR COMPLEX ARITHMETIC VERSION  CABNK0092
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCABNK0093
C                                                                       ABNK0094
      IMPLICIT REAL*8 (A-H,O-Z)                                         ABNK0095
      DIMENSION    FC(1),GC(1),FCP(1),GCP(1)                            ABNK0096
      LOGICAL      ETANE0,XLTURN                                        ABNK0097
      COMMON       /STEED/ PACCQ,NFP,NPQ,IEXP,M1                        ABNK0098
C***  COMMON BLOCK IS FOR INFORMATION ONLY.  NOT REQUIRED IN CODE       ABNK0099
C***  COULFG HAS CALLS TO: DSQRT,DABS,DMOD,IDINT,DSIGN,DFLOAT,DMIN1     ABNK0100
      DATA ZERO,ONE,TWO,TEN2,ABORT /0.0D0, 1.0D0, 2.0D0, 1.0D2, 2.0D4/  ABNK0101
      DATA HALF,TM30 / 0.5D0, 1.0D-30 /                                 ABNK0102
      DATA RT2DPI /0.79788 45608 02865 35587 98921 19868 76373 D0/      ABNK0103
C *** THIS CONSTANT IS  DSQRT(TWO/PI):  USE Q0 FOR IBM REAL*16: D0 FOR  ABNK0104
C ***  REAL*8 & CDC DOUBLE P:  E0 FOR CDC SINGLE P; AND TRUNCATE VALUE. ABNK0105
C                                                                       ABNK0106
                        ACCUR = 1.0D-16                                 ABNK0107
C ***            CHANGE ACCUR TO SUIT MACHINE AND PRECISION REQUIRED    ABNK0108
      MODE  = 1                                                         ABNK0109
      IF(MODE1 .EQ. 2 .OR. MODE1 .EQ. 3 ) MODE = MODE1                  ABNK0110
      IFAIL = 0                                                         ABNK0111
      IEXP  = 1                                                         ABNK0112
      NPQ   = 0                                                         ABNK0113
      ETA   = ETA1                                                      ABNK0114
      GJWKB = ZERO                                                      ABNK0115
      PACCQ = ONE                                                       ABNK0116
      IF(KFN .NE. 0) ETA = ZERO                                         ABNK0117
                 ETANE0  = ETA .NE. ZERO                                ABNK0118
      ACC   = ACCUR                                                     ABNK0119
      ACC4  = ACC*TEN2*TEN2                                             ABNK0120
      ACCH  = DSQRT(ACC)                                                ABNK0121
C ***    TEST RANGE OF XX, EXIT IF.LE.DSQRT(ACCUR) OR IF NEGATIVE       ABNK0122
C                                                                       ABNK0123
      IF(XX .LE. ACCH)                          GO TO 100               ABNK0124
      X     = XX                                                        ABNK0125
      XLM   = XLMIN                                                     ABNK0126
      IF(KFN .EQ. 2)  XLM = XLM - HALF                                  ABNK0127
      IF(XLM .LE. -ONE .OR. XLMAX .LT. XLMIN)   GO TO 105               ABNK0128
      E2MM1 = ETA*ETA + XLM*XLM + XLM                                   ABNK0129
      XLTURN= X*(X - TWO*ETA) .LT. XLM*XLM + XLM                        ABNK0130
      DELL  = XLMAX - XLMIN + ACC                                       ABNK0131
      IF(DABS(DMOD(DELL,ONE)) .GT. ACC) WRITE(6,2040)XLMAX,XLMIN,DELL   ABNK0132
      LXTRA = IDINT(DELL)                                               ABNK0133
      XLL   = XLM + DFLOAT(LXTRA)                                       ABNK0134
C ***       LXTRA IS NUMBER OF ADDITIONAL LAMBDA VALUES TO BE COMPUTED  ABNK0135
C ***       XLL  IS MAX LAMBDA VALUE, OR 0.5 SMALLER FOR J,Y BESSELS    ABNK0136
C ***         DETERMINE STARTING ARRAY ELEMENT (M1) FROM XLMIN          ABNK0137
      M1  = MAX0(IDINT(XLMIN + ACC),0) + 1                              ABNK0138
      L1  = M1 + LXTRA                                                  ABNK0139
C                                                                       ABNK0140
C ***    EVALUATE CF1  =  F   =  FPRIME(XL,ETA,X)/F(XL,ETA,X)           ABNK0141
C                                                                       ABNK0142
      XI  = ONE/X                                                       ABNK0143
      FCL = ONE                                                         ABNK0144
      PK  = XLL + ONE                                                   ABNK0145
      PX  = PK  + ABORT                                                 ABNK0146
    2 EK  = ETA / PK                                                    ABNK0147
      F   = (EK + PK*XI)*FCL + (FCL - ONE)*XI                           ABNK0148
      PK1 =  PK + ONE                                                   ABNK0149
C ***   TEST ENSURES B1 .NE. ZERO FOR NEGATIVE ETA; FIXUP IS EXACT.     ABNK0150
             IF(DABS(ETA*X + PK*PK1) .GT. ACC)  GO TO 3                 ABNK0151
             FCL  = (ONE + EK*EK)/(ONE + (ETA/PK1)**2)                  ABNK0152
             PK   =  TWO + PK                                           ABNK0153
      GO TO 2                                                           ABNK0154
    3 D   =  ONE/((PK + PK1)*(XI + EK/PK1))                             ABNK0155
      DF  = -FCL*(ONE + EK*EK)*D                                        ABNK0156
            IF(FCL .NE. ONE )  FCL = -ONE                               ABNK0157
            IF(D   .LT. ZERO)  FCL = -FCL                               ABNK0158
      F   =  F  + DF                                                    ABNK0159
C                                                                       ABNK0160
C ***   BEGIN CF1 LOOP ON PK = K = LAMBDA + 1                           ABNK0161
C                                                                       ABNK0162
      P     = ONE                                                       ABNK0163
    4 PK    = PK1                                                       ABNK0164
        PK1 = PK1 + ONE                                                 ABNK0165
        EK  = ETA / PK                                                  ABNK0166
        TK  = (PK + PK1)*(XI + EK/PK1)                                  ABNK0167
        D   =  TK - D*(ONE + EK*EK)                                     ABNK0168
              IF(DABS(D) .GT. ACCH)             GO TO 5                 ABNK0169
              WRITE (6,1000) D,DF,ACCH,PK,EK,ETA,X                      ABNK0170
              P = P  +   ONE                                            ABNK0171
              IF( P .GT. TWO )                  GO TO 110               ABNK0172
    5 D     = ONE/D                                                     ABNK0173
              IF (D .LT. ZERO) FCL = -FCL                               ABNK0174
        DF  = DF*(D*TK - ONE)                                           ABNK0175
        F   = F  + DF                                                   ABNK0176
              IF(PK .GT. PX)                    GO TO 110               ABNK0177
      IF(DABS(DF) .GE. DABS(F)*ACC)             GO TO 4                 ABNK0178
                  NFP = PK - XLL - 1                                    ABNK0179
      IF(LXTRA .EQ. 0)                          GO TO 7                 ABNK0180
C                                                                       ABNK0181
C *** DOWNWARD RECURRENCE TO LAMBDA = XLM. ARRAY GC,IF PRESENT,STORES RLABNK0182
C                                                                       ABNK0183
      FCL = FCL*TM30                                                    ABNK0184
      FPL = FCL*F                                                       ABNK0185
      IF(MODE .EQ. 1) FCP(L1) = FPL                                     ABNK0186
                      FC (L1) = FCL                                     ABNK0187
      XL  = XLL                                                         ABNK0188
      RL  = ONE                                                         ABNK0189
      EL  = ZERO                                                        ABNK0190
      DO 6  LP = 1,LXTRA                                                ABNK0191
         IF(ETANE0) EL = ETA/XL                                         ABNK0192
         IF(ETANE0) RL = DSQRT(ONE + EL*EL)                             ABNK0193
         SL    =  EL  + XL*XI                                           ABNK0194
         L     =  L1  - LP                                              ABNK0195
         FCL1  = (FCL *SL + FPL)/RL                                     ABNK0196
         FPL   =  FCL1*SL - FCL *RL                                     ABNK0197
         FCL   =  FCL1                                                  ABNK0198
         FC(L) =  FCL                                                   ABNK0199
         IF(MODE .EQ. 1) FCP(L)  = FPL                                  ABNK0200
         IF(MODE .NE. 3 .AND. ETANE0) GC(L+1) = RL                      ABNK0201
    6 XL = XL - ONE                                                     ABNK0202
      IF(FCL .EQ. ZERO) FCL = ACC                                       ABNK0203
      F  = FPL/FCL                                                      ABNK0204
C ***    NOW WE HAVE REACHED LAMBDA = XLMIN = XLM                       ABNK0205
C ***    EVALUATE CF2 = P + I.Q  AGAIN USING STEED'S ALGORITHM          ABNK0206
C ***    SEE TEXT FOR COMPACT COMPLEX CODE FOR SP CDC OR NON-ANSI IBM   ABNK0207
C                                                                       ABNK0208
    7 IF( XLTURN ) CALL JWKB(X,ETA,DMAX1(XLM,ZERO),FJWKB,GJWKB,IEXP)    ABNK0209
      IF( IEXP .GT. 1 .OR. GJWKB .GT. ONE/(ACCH*TEN2))  GO TO 9         ABNK0210
          XLTURN = .FALSE.                                              ABNK0211
      TA =  TWO*ABORT                                                   ABNK0212
      PK =  ZERO                                                        ABNK0213
      WI =  ETA + ETA                                                   ABNK0214
      P  =  ZERO                                                        ABNK0215
      Q  =  ONE - ETA*XI                                                ABNK0216
      AR = -E2MM1                                                       ABNK0217
      AI =  ETA                                                         ABNK0218
      BR =  TWO*(X - ETA)                                               ABNK0219
      BI =  TWO                                                         ABNK0220
      DR =  BR/(BR*BR + BI*BI)                                          ABNK0221
      DI = -BI/(BR*BR + BI*BI)                                          ABNK0222
      DP = -XI*(AR*DI + AI*DR)                                          ABNK0223
      DQ =  XI*(AR*DR - AI*DI)                                          ABNK0224
    8 P     = P  + DP                                                   ABNK0225
         Q  = Q  + DQ                                                   ABNK0226
         PK = PK + TWO                                                  ABNK0227
         AR = AR + PK                                                   ABNK0228
         AI = AI + WI                                                   ABNK0229
         BI = BI + TWO                                                  ABNK0230
         D  = AR*DR - AI*DI + BR                                        ABNK0231
         DI = AI*DR + AR*DI + BI                                        ABNK0232
         C  = ONE/(D*D + DI*DI)                                         ABNK0233
         DR =  C*D                                                      ABNK0234
         DI = -C*DI                                                     ABNK0235
         A  = BR*DR - BI*DI - ONE                                       ABNK0236
         B  = BI*DR + BR*DI                                             ABNK0237
         C  = DP*A  - DQ*B                                              ABNK0238
         DQ = DP*B  + DQ*A                                              ABNK0239
         DP = C                                                         ABNK0240
         IF(PK .GT. TA)                         GO TO 120               ABNK0241
      IF(DABS(DP)+DABS(DQ).GE.(DABS(P)+DABS(Q))*ACC)   GO TO 8          ABNK0242
                      NPQ   = PK/TWO                                    ABNK0243
                      PACCQ = HALF*ACC/DMIN1(DABS(Q),ONE)               ABNK0244
                      IF(DABS(P) .GT. DABS(Q)) PACCQ = PACCQ*DABS(P)    ABNK0245
C                                                                       ABNK0246
C *** SOLVE FOR FCM = F AT LAMBDA = XLM,THEN FIND NORM FACTOR W=W/FCM   ABNK0247
C                                                                       ABNK0248
      GAM = (F - P)/Q                                                   ABNK0249
            IF(Q .LE. ACC4*DABS(P))             GO TO 130               ABNK0250
      W   = ONE/DSQRT((F - P)*GAM + Q)                                  ABNK0251
            GO TO 10                                                    ABNK0252
C *** ARRIVE HERE IF G(XLM) .GT. 10**6 OR IEXP .GT. 70 & XLTURN = .TRUE.ABNK0253
    9 W   = FJWKB                                                       ABNK0254
      GAM = GJWKB*W                                                     ABNK0255
      P   = F                                                           ABNK0256
      Q   = ONE                                                         ABNK0257
C                                                                       ABNK0258
C *** NORMALISE FOR SPHERICAL OR CYLINDRICAL BESSEL FUNCTIONS           ABNK0259
C                                                                       ABNK0260
   10                     ALPHA = ZERO                                  ABNK0261
          IF(KFN  .EQ. 1) ALPHA = XI                                    ABNK0262
          IF(KFN  .EQ. 2) ALPHA = XI*HALF                               ABNK0263
                          BETA  = ONE                                   ABNK0264
          IF(KFN  .EQ. 1) BETA  = XI                                    ABNK0265
          IF(KFN  .EQ. 2) BETA  = DSQRT(XI)*RT2DPI                      ABNK0266
      FCM  = DSIGN(W,FCL)*BETA                                          ABNK0267
           FC(M1)  = FCM                                                ABNK0268
                      IF(MODE .EQ. 3)           GO TO 11                ABNK0269
           IF(.NOT. XLTURN)   GCL =  FCM*GAM                            ABNK0270
           IF(      XLTURN)   GCL =  GJWKB*BETA                         ABNK0271
           IF( KFN .NE. 0 )   GCL = -GCL                                ABNK0272
           GC(M1)  = GCL                                                ABNK0273
           GPL =  GCL*(P - Q/GAM) - ALPHA*GCL                           ABNK0274
                      IF(MODE .EQ. 2)           GO TO 11                ABNK0275
           GCP(M1) = GPL                                                ABNK0276
           FCP(M1) = FCM*(F - ALPHA)                                    ABNK0277
   11 IF(LXTRA .EQ. 0 ) RETURN                                          ABNK0278
C *** UPWARD RECURRENCE FROM GC(M1),GCP(M1)  STORED VALUE IS RL         ABNK0279
C *** RENORMALISE FC,FCP AT EACH LAMBDA AND CORRECT REGULAR DERIVATIVE  ABNK0280
C ***    XL   = XLM HERE  AND RL = ONE , EL = ZERO FOR BESSELS          ABNK0281
         W    = BETA*W/DABS(FCL)                                        ABNK0282
         MAXL = L1 - 1                                                  ABNK0283
      DO 12 L = M1,MAXL                                                 ABNK0284
                      IF(MODE .EQ. 3)           GO TO 12                ABNK0285
                      XL = XL + ONE                                     ABNK0286
         IF(ETANE0)   EL = ETA/XL                                       ABNK0287
         IF(ETANE0)   RL = GC(L+1)                                      ABNK0288
                      SL = EL + XL*XI                                   ABNK0289
         GCL1     = ((SL - ALPHA)*GCL - GPL)/RL                         ABNK0290
         GPL      =   RL*GCL -  (SL + ALPHA)*GCL1                       ABNK0291
         GCL      = GCL1                                                ABNK0292
         GC(L+1)  = GCL1                                                ABNK0293
                      IF(MODE .EQ. 2)           GO TO 12                ABNK0294
         GCP(L+1) = GPL                                                 ABNK0295
         FCP(L+1) = W*(FCP(L+1) - ALPHA*FC(L+1))                        ABNK0296
   12 FC(L+1)     = W* FC(L+1)                                          ABNK0297
      RETURN                                                            ABNK0298
 1000 FORMAT(/' CF1 ACCURACY LOSS: D,DF,ACCH,K,ETA/K,ETA,X = ',1P7D9.2/)ABNK0299
C                                                                       ABNK0300
C ***    ERROR MESSAGES                                                 ABNK0301
C                                                                       ABNK0302
  100 IFAIL = -1                                                        ABNK0303
      WRITE(6,2000) XX,ACCH                                             ABNK0304
 2000 FORMAT(' FOR XX = ',1PD12.3,' TRY SMALL-X  SOLUTIONS',            ABNK0305
     *' OR X NEGATIVE'/ ,' SQUARE ROOT ACCURACY PARAMETER =  ',D12.3/)  ABNK0306
      RETURN                                                            ABNK0307
  105 IFAIL = -2                                                        ABNK0308
      WRITE (6,2005) XLMAX,XLMIN,XLM                                    ABNK0309
 2005 FORMAT(/' PROBLEM WITH INPUT ORDER VALUES:XLMAX,XLMIN,XLM = ',    ABNK0310
     *1P3D15.6/)                                                        ABNK0311
      RETURN                                                            ABNK0312
  110 IFAIL =  1                                                        ABNK0313
      WRITE (6,2010) ABORT,F ,DF,PK,PX,ACC                              ABNK0314
 2010 FORMAT(' CF1 HAS FAILED TO CONVERGE AFTER ',F10.0,' ITERATIONS',/ ABNK0315
     *' F,DF,PK,PX,ACCUR =  ',1P5D12.3//)                               ABNK0316
      RETURN                                                            ABNK0317
  120 IFAIL =  2                                                        ABNK0318
      WRITE (6,2020) ABORT,P,Q,DP,DQ,ACC                                ABNK0319
 2020 FORMAT(' CF2 HAS FAILED TO CONVERGE AFTER ',F7.0,' ITERATIONS',/  ABNK0320
     *' P,Q,DP,DQ,ACCUR =  ',1P4D17.7,D12.3//)                          ABNK0321
      RETURN                                                            ABNK0322
  130 IFAIL =  3                                                        ABNK0323
      WRITE (6,2030) P,Q,ACC,DELL,LXTRA,M1                              ABNK0324
 2030 FORMAT(' FINAL Q.LE.DABS(P)*ACC*10**4 , P,Q,ACC = ',1P3D12.3,4X,  ABNK0325
     *' DELL,LXTRA,M1 = ',D12.3,2I5 /)                                  ABNK0326
      RETURN                                                            ABNK0327
 2040 FORMAT(' XLMAX - XLMIN = DELL NOT AN INTEGER ',1P3D20.10/)        ABNK0328
      END                                                               ABNK0329
C                                                                       ABNK0330
      SUBROUTINE JWKB(XX,ETA1,XL,FJWKB,GJWKB,IEXP)                      ABNK0331
      REAL*8          XX,ETA1,XL,FJWKB,GJWKB,DZERO                      ABNK0332
C *** COMPUTES JWKB APPROXIMATIONS TO COULOMB FUNCTIONS    FOR XL.GE. 0 ABNK0333
C *** AS MODIFIED BY BIEDENHARN ET AL. PHYS REV 97 (1955) 542-554       ABNK0334
C *** CALLS DMAX1,SQRT,ALOG,EXP,ATAN2,FLOAT,INT        BARNETT FEB 1981 ABNK0335
      DATA   ZERO,HALF,ONE,SIX,TEN/ 0.0E0, 0.5E0, 1.0E0, 6.0E0, 10.0E0 /ABNK0336
      DATA  DZERO, RL35, ALOGE  /0.0D0, 35.0E0, 0.43429 45 E0 /         ABNK0337
      X     = XX                                                        ABNK0338
      ETA   = ETA1                                                      ABNK0339
      GH2   = X*(ETA + ETA - X)                                         ABNK0340
      XLL1  = DMAX1(XL*XL + XL,DZERO)                                   ABNK0341
      IF(GH2 + XLL1 .LE. ZERO) RETURN                                   ABNK0342
       HLL  = XLL1 + SIX/RL35                                           ABNK0343
       HL   = SQRT(HLL)                                                 ABNK0344
       SL   = ETA/HL + HL/X                                             ABNK0345
       RL2  = ONE + ETA*ETA/HLL                                         ABNK0346
       GH   = SQRT(GH2 + HLL)/X                                         ABNK0347
       PHI  = X*GH - HALF*( HL*ALOG((GH + SL)**2/RL2) - ALOG(GH) )      ABNK0348
          IF(ETA .NE. ZERO) PHI = PHI - ETA*ATAN2(X*GH,X - ETA)         ABNK0349
      PHI10 = -PHI*ALOGE                                                ABNK0350
      IEXP  =  INT(PHI10)                                               ABNK0351
      IF(IEXP .GT. 70) GJWKB = TEN**(PHI10 - FLOAT(IEXP))               ABNK0352
      IF(IEXP .LE. 70) GJWKB = EXP(-PHI)                                ABNK0353
      IF(IEXP .LE. 70) IEXP  = 0                                        ABNK0354
      FJWKB = HALF/(GH*GJWKB)                                           ABNK0355
      RETURN                                                            ABNK0356
      END                                                               ABNK0357
//G.SYSIN  DD  *                                                        ABNK0358
-50.0         1    0   10   50                                          ABNK0359
  5.0                                                                   ABNK0360
-50.0         1   10   20                                           10  ABNK0361
 50.0                                                                   ABNK0362
-4.0          1    0    5   10                                          ABNK0363
 5.0                                                                    ABNK0364
-4.0          1   50  100                                           50  ABNK0365
50.0                                                                    ABNK0366
10.0          1    0    5   20                                          ABNK0367
 5.0                                                                    ABNK0368
10.0          1   30   50                                           30  ABNK0369
50.0                                                                    ABNK0370
 100.0        1    0   50  100                                          ABNK0371
1000.0                                                                  ABNK0372
100.0         1    0    5   10   30                                  0-4ABNK0373
  1.0                                                                   ABNK0374
   JWKB EXAMPLES   CALCULATIONS OF BARDIN ET AL.                        ABNK0375
100.0         2    0   20                                               ABNK0376
  5.0     50.0                                                          ABNK0377
10.0          1   30   50                                           30  ABNK0378
 5.0                                                                    ABNK0379
-4.0          1   30   50                                           30  ABNK0380
 5.0                                                                    ABNK0381
500.0         2    0                                                    ABNK0382
0.001    0.025                                                          ABNK0383
 2.0          1    0    1                                            0-4ABNK0384
10.0                                                                    ABNK0385
   OTHER TEST EXAMPLES OF COULOMB FUNCTIONS                             ABNK0386
 4.0          1    1    4                                               ABNK0387
10.0                                                                    ABNK0388
 5.0          1    0    1    7                                          ABNK0389
10.0                                                                    ABNK0390
10.0          1    0    7   10                                          ABNK0391
10.0                                                                    ABNK0392
25.0          1    0    1                                               ABNK0393
10.0                                                                    ABNK0394
5.0           1    0    1   19   20                                     ABNK0395
5.0                                                                     ABNK0396
4.0           3    0                                                    ABNK0397
6.0       7.0       8.0                                                 ABNK0398
1.0           3    0                                                    ABNK0399
0.6       3.0       6.0                                                 ABNK0400
1.995         1    0                                                    ABNK0401
1.2                                                                     ABNK0402
3.981         1    0                                                    ABNK0403
2.4                                                                     ABNK0404
 18.564       1    0   30   60   80  100  120  140  160  180  200       ABNK0405
116.790                                                                 ABNK0406
-4.0          1    0    1    2    3                                     ABNK0407
 5.0                                                                    ABNK0408
0.0           6    0   10   30   40                            -1    0-2ABNK0409
1.0       2.0       5.0       10.0      50.0      100.0                 ABNK0410
   CYLINDRICAL BESSEL FUNCTIONS *** ABRAMOWITZ & STEGUN  PAGES 407 - 408ABNK0411
0.0           6    0   10   30   40                            -1    0-1ABNK0412
1.0       2.0       5.0       10.0      50.0      100.0                 ABNK0413
     SPHERICAL BESSEL FUNCTIONS *** ABRAMOWITZ & STEGUN  PAGES 465 - 466ABNK0414
0.0           9                                                    3.0-3ABNK0415
0.24      0.5       1.0       2.0       4.0       5.0       8.0         ABNK0416
10.0      16.0                                                          ABNK0417
   BESSELS WITH ORDER 1/3  ***  WATSON TABLE III   PAGES 714 - 729      ABNK0418
0.0           1    0    1    2    4    5    6   10   14   18   20    0-2ABNK0419
8.7714838                                                               ABNK0420
   BLANCH TEST OF RECURRENCE THROUGH THE ZERO OF J5 NEAR X = 8.7714838  ABNK0421
0.0           2  100                                               100 2ABNK0422
1.0       2.0                                                           ABNK0423
-500.0        2    0                                                  -4ABNK0424
0.001     .000000001                                                    ABNK0425
    EXAMPLES OF ERROR CONDITIONS                                        ABNK0426
1.0           1 -2.2                                                    ABNK0427
-20000.0                                                                ABNK0428
0.0           1    1                                                    ABNK0429
-55.0                                                                   ABNK0430
0.0       00000                                                         ABNK0431
//                                                                      ABNK0432
                                                                        ABNK****
